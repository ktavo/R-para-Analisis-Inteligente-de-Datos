dulces = split(galletitas, galletitas$Tipo)$dulce
#Agrupa galletitas saladas
saladas = split(galletitas, galletitas$Tipo)$salada
#Media galletitas dulces
med.dul = apply(dulces[,2:6], 2, mean)
#Media galletitas saladas
med.sal = apply(saladas[,2:6], 2, mean)
#Arregla datos para el gráfico
data.plot = data.frame(group = c(1,2,3,4,5), value1 = med.dul + 7, value2 = med.sal)
melteddata = melt(data.plot, id = "group")
ggplot(melteddata, aes(x = group, y = value, colour = variable)) +
geom_line() +
xlab("Variables") +
ylab("Medias") +
scale_x_discrete(limit = c("1", "2", "3", "4", "5"),
labels = c("Calorías", "Carbohidratos",
"Proteínas", "Grasas", "Sodio")) +
labs(colour = "Tipo") +
scale_colour_manual(labels = c("Dulces", "Saladas")
values = c("royalblue", "green4"))
#Multivariate profiles
#Permite comparar la posición central de varias variables en distintos individuos
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
library("ggplot2")
library("readxl")
library("reshape")
#Importa Archivo para trabajar
galletitas = read_excel("../Data Sets Apunte Teórico/galletitas.xlsx")
attach(galletitas)
#Agrupa galletitas dulces
dulces = split(galletitas, galletitas$Tipo)$dulce
#Agrupa galletitas saladas
saladas = split(galletitas, galletitas$Tipo)$salada
#Media galletitas dulces
med.dul = apply(dulces[,2:6], 2, mean)
#Media galletitas saladas
med.sal = apply(saladas[,2:6], 2, mean)
#Arregla datos para el gráfico
data.plot = data.frame(group = c(1,2,3,4,5), value1 = med.dul + 7, value2 = med.sal)
melteddata = melt(data.plot, id = "group")
ggplot(melteddata, aes(x = group, y = value, colour = variable)) +
geom_line() +
xlab("Variables") +
ylab("Medias") +
scale_x_discrete(limit = c("1", "2", "3", "4", "5"),
labels = c("Calorías", "Carbohidratos",
"Proteínas", "Grasas", "Sodio")) +
labs(colour = "Tipo") +
scale_colour_manual(labels = c("Dulces", "Saladas"),
values = c("royalblue", "green4"))
#Level Curves
#Los colores y las lineas de contorno ayudan a identificar regiones de mayor densidad de observaciones.
#Mostramos el caso de la distribución Normal Bivariada en las Figuras
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Defino la función de distribución normal bivariada con ro = 0
fun = functio(x, y) exp (-x^2-y^2)
#Asignamos valores a las variables
x = seq(-3,3,0.1)
y = x
#Generamos la gráfica de normal bivariada
persp(x,y, outer(x,y,fun), theta = -15, phi = 30, r = sqrt(3), d = 3,
col = "deepskyblue1", xlab = "x", ylad = "y", zlab = "z")
#Gráficamos las curvas de nivel de la normal bivariada
filled.contour(outer(x,y,fun), axes = TRUE, frame.plot = FALSE, plot.axes = FALSE)
#Level Curves
#Los colores y las lineas de contorno ayudan a identificar regiones de mayor densidad de observaciones.
#Mostramos el caso de la distribución Normal Bivariada en las Figuras
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Defino la función de distribución normal bivariada con ro = 0
fun = function(x, y) exp (-x^2-y^2)
#Asignamos valores a las variables
x = seq(-3,3,0.1)
y = x
#Generamos la gráfica de normal bivariada
persp(x,y, outer(x,y,fun), theta = -15, phi = 30, r = sqrt(3), d = 3,
col = "deepskyblue1", xlab = "x", ylad = "y", zlab = "z")
#Gráficamos las curvas de nivel de la normal bivariada
filled.contour(outer(x,y,fun), axes = TRUE, frame.plot = FALSE, plot.axes = FALSE)
#Level Curves
#Los colores y las lineas de contorno ayudan a identificar regiones de mayor densidad de observaciones.
#Mostramos el caso de la distribución Normal Bivariada en las Figuras
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Defino la función de distribución normal bivariada con ro = 0
fun = function(x, y) exp (-x^2-y^2)
#Asignamos valores a las variables
x = seq(-3,3,0.1)
y = x
#Generamos la gráfica de normal bivariada
persp(x,y, outer(x,y,fun), theta = -15, phi = 30, r = sqrt(3), d = 3,
col = "deepskyblue1", xlab = "x", ylab = "y", zlab = "z")
#Gráficamos las curvas de nivel de la normal bivariada
filled.contour(outer(x,y,fun), axes = TRUE, frame.plot = FALSE, plot.axes = FALSE)
#Star Graph
#Cuando todas las variables consideradas son cuantitativas para poder detectar estructuras similares,
#es adecuado el gráfico de estrellas.
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Toma las primeras nueve marcas de la base
autos = mtcars[1:9,]
#Añadimos etiquetas
row.names(autos) = c("Mazda", "Mazda_Wag", "Datsun", "Hornet_D", "Hornet_S",
"Valiant", "Duster", "Merc_D", "Merc")
#Generamos diagrama de estrellas
stars(autos, full = F, cex = 0.8, flip.labels = T, len = 0.9, col.stars = cm.colors(9))
#Star Graph
#Cuando todas las variables consideradas son cuantitativas para poder detectar estructuras similares,
#es adecuado el gráfico de estrellas.
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Toma las primeras nueve marcas de la base
autos = mtcars[1:9,]
#Añadimos etiquetas
row.names(autos) = c("Mazda", "Mazda_Wag", "Datsun", "Hornet_D", "Hornet_S",
"Valiant", "Duster", "Merc_D", "Merc")
#Generamos diagrama de estrellas
stars(autos, full = F, cex = 0.8, flip.labels = T, len = 1.9, col.stars = cm.colors(9))
#Star Graph
#Cuando todas las variables consideradas son cuantitativas para poder detectar estructuras similares,
#es adecuado el gráfico de estrellas.
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Toma las primeras nueve marcas de la base
autos = mtcars[1:9,]
#Añadimos etiquetas
row.names(autos) = c("Mazda", "Mazda_Wag", "Datsun", "Hornet_D", "Hornet_S",
"Valiant", "Duster", "Merc_D", "Merc")
#Generamos diagrama de estrellas
stars(autos, full = F, cex = 0.8, flip.labels = T, len = 0.9, col.stars = cm.colors(9))
#Star Graph
#Cuando todas las variables consideradas son cuantitativas para poder detectar estructuras similares,
#es adecuado el gráfico de estrellas.
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Toma las primeras nueve marcas de la base
autos = mtcars[1:9,]
#Añadimos etiquetas
row.names(autos) = c("Mazda", "Mazda_Wag", "Datsun", "Hornet_D", "Hornet_S",
"Valiant", "Duster", "Merc_D", "Merc")
#Generamos diagrama de estrellas
stars(autos, full = F, cex = 0.2, flip.labels = T, len = 0.9, col.stars = cm.colors(9))
#Star Graph
#Cuando todas las variables consideradas son cuantitativas para poder detectar estructuras similares,
#es adecuado el gráfico de estrellas.
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Toma las primeras nueve marcas de la base
autos = mtcars[1:9,]
#Añadimos etiquetas
row.names(autos) = c("Mazda", "Mazda_Wag", "Datsun", "Hornet_D", "Hornet_S",
"Valiant", "Duster", "Merc_D", "Merc")
#Generamos diagrama de estrellas
stars(autos, full = F, cex = 2.2, flip.labels = T, len = 0.9, col.stars = cm.colors(9))
#Star Graph
#Cuando todas las variables consideradas son cuantitativas para poder detectar estructuras similares,
#es adecuado el gráfico de estrellas.
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Toma las primeras nueve marcas de la base
autos = mtcars[1:9,]
#Añadimos etiquetas
row.names(autos) = c("Mazda", "Mazda_Wag", "Datsun", "Hornet_D", "Hornet_S",
"Valiant", "Duster", "Merc_D", "Merc")
#Generamos diagrama de estrellas
stars(autos, full = F, cex = 0.8, flip.labels = T, len = 0.9, col.stars = cm.colors(9))
#Star Graph
#Cuando todas las variables consideradas son cuantitativas para poder detectar estructuras similares,
#es adecuado el gráfico de estrellas.
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Toma las primeras nueve marcas de la base
autos = mtcars[1:9,]
#Añadimos etiquetas
row.names(autos) = c("Mazda", "Mazda_Wag", "Datsun", "Hornet_D", "Hornet_S",
"Valiant", "Duster", "Merc_D", "Merc")
#Generamos diagrama de estrellas
stars(autos, full = F, cex = 0.8, flip.labels = T, len = 0.9, col.stars = cm.colors(9))
detach(galletitas)
install.packages("tcltk2")
install.packages("tcltk2")
#Chernoff Faces
#Los diversos datos se transforman en caras, sirve para identificar similitudes entre individuos
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
library("tcltk2")
library("aplpack")
library("readxl")
#Importa Archivo para trabajar
galletitas = read_excel("../Data Sets Apunte Teórico/galletitas.xlsx")
attach(galletitas)
#Agrupamos las galletitas saladas
saladas = split(galletitas, galletitas$Tipo)$salada
#Genera las caras de Chernoff
faces(saladas[,2:6], nrow.plot = 2, ncol.plot = 5, face.type = 1, labels = saladas$Marca)
#Chernoff Faces
#Los diversos datos se transforman en caras, sirve para identificar similitudes entre individuos
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
library("tcltk2")
library("aplpack")
library("readxl")
#Importa Archivo para trabajar
galletitas = read_excel("../Data Sets Apunte Teórico/galletitas.xlsx")
attach(galletitas)
#Agrupamos las galletitas saladas
saladas = split(galletitas, galletitas$Tipo)$salada
#Genera las caras de Chernoff
faces(saladas[,2:6], nrow.plot = 2, ncol.plot = 5, face.type = 3, labels = saladas$Marca)
#Chernoff Faces
#Los diversos datos se transforman en caras, sirve para identificar similitudes entre individuos
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
library("tcltk2")
library("aplpack")
library("readxl")
#Importa Archivo para trabajar
galletitas = read_excel("../Data Sets Apunte Teórico/galletitas.xlsx")
attach(galletitas)
#Agrupamos las galletitas saladas
saladas = split(galletitas, galletitas$Tipo)$salada
#Genera las caras de Chernoff
faces(saladas[,2:6], nrow.plot = 2, ncol.plot = 5, face.type = 2, labels = saladas$Marca)
#Chernoff Faces
#Los diversos datos se transforman en caras, sirve para identificar similitudes entre individuos
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
library("tcltk2")
library("aplpack")
library("readxl")
#Importa Archivo para trabajar
galletitas = read_excel("../Data Sets Apunte Teórico/galletitas.xlsx")
attach(galletitas)
#Agrupamos las galletitas saladas
saladas = split(galletitas, galletitas$Tipo)$salada
#Genera las caras de Chernoff
faces(saladas[,2:6], nrow.plot = 2, ncol.plot = 5, face.type = 4, labels = saladas$Marca)
#Chernoff Faces
#Los diversos datos se transforman en caras, sirve para identificar similitudes entre individuos
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
library("tcltk2")
library("aplpack")
library("readxl")
#Importa Archivo para trabajar
galletitas = read_excel("../Data Sets Apunte Teórico/galletitas.xlsx")
attach(galletitas)
#Agrupamos las galletitas saladas
saladas = split(galletitas, galletitas$Tipo)$salada
#Genera las caras de Chernoff
faces(saladas[,2:6], nrow.plot = 2, ncol.plot = 5, face.type = 7, labels = saladas$Marca)
#Chernoff Faces
#Los diversos datos se transforman en caras, sirve para identificar similitudes entre individuos
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
library("tcltk2")
library("aplpack")
library("readxl")
#Importa Archivo para trabajar
galletitas = read_excel("../Data Sets Apunte Teórico/galletitas.xlsx")
attach(galletitas)
#Agrupamos las galletitas saladas
saladas = split(galletitas, galletitas$Tipo)$salada
#Genera las caras de Chernoff
faces(saladas[,2:6], nrow.plot = 2, ncol.plot = 5, face.type = 1, labels = saladas$Marca)
#univariate control
#Si observamos el comportamiento de una de las variables por separado, podemos detectar si
#alguna de ellas se ha ido de rango.
#Paquete para dibujos
library("ggplot2")
#Paquete para manipular datos
library("dplyr")
#Paquete para leer archivos xlsx
library("readxl")
#Importa Archivo para trabajar
datos = read_excel("../Data Sets Apunte Teórico/controlunivariado.xlsx")
attach(datos)
#Reagrupa la base
dat = datos %% group_by(Obs, Clase)
#Modificamos Etiquetas
exp_names <- c("A" = "Bajo_Control", "B" = "Fuera_De_Control", "C" = "Fuera_De_Control")
ggplo(dat, aes(x = Obs, y = Valor, group = Clase, colour = Clase)) +
facet_wrap(~Experimento, labeller = as_labeller(exp_names)) +
geom_point() +
geom_hline(yintercept = 1, linetype = "dashed") +
geom_hline(yintercept = 3, linetype = "dashed") +
xlab("Observaciones") +
ylab("") +
theme(legend.position = "none") +
scale_color_manual(values = c("royalblue", "indianred3"))
#univariate control
#Si observamos el comportamiento de una de las variables por separado, podemos detectar si
#alguna de ellas se ha ido de rango.
#Paquete para dibujos
library("ggplot2")
#Paquete para manipular datos
library("dplyr")
#Paquete para leer archivos xlsx
library("readxl")
#Importa Archivo para trabajar
datos = read_excel("../Data Sets Apunte Teórico/controlunivariado.xlsx")
attach(datos)
#Reagrupa la base
dat = datos %% group_by(Obs, Clase)
#Modificamos Etiquetas
exp_names <- c("A" = "Bajo_Control", "B" = "Fuera_De_Control", "C" = "Fuera_De_Control")
ggplop(dat, aes(x = Obs, y = Valor, group = Clase, colour = Clase)) +
facet_wrap(~Experimento, labeller = as_labeller(exp_names)) +
geom_point() +
geom_hline(yintercept = 1, linetype = "dashed") +
geom_hline(yintercept = 3, linetype = "dashed") +
xlab("Observaciones") +
ylab("") +
theme(legend.position = "none") +
scale_color_manual(values = c("royalblue", "indianred3"))
#univariate control
#Si observamos el comportamiento de una de las variables por separado, podemos detectar si
#alguna de ellas se ha ido de rango.
#Paquete para dibujos
library("ggplot2")
#Paquete para manipular datos
library("dplyr")
#Paquete para leer archivos xlsx
library("readxl")
#Importa Archivo para trabajar
datos = read_excel("../Data Sets Apunte Teórico/controlunivariado.xlsx")
attach(datos)
#Reagrupa la base
dat = datos %% group_by(Obs, Clase)
#Modificamos Etiquetas
exp_names <- c("A" = "Bajo_Control", "B" = "Fuera_De_Control", "C" = "Fuera_De_Control")
ggplot(dat, aes(x = Obs, y = Valor, group = Clase, colour = Clase)) +
facet_wrap(~Experimento, labeller = as_labeller(exp_names)) +
geom_point() +
geom_hline(yintercept = 1, linetype = "dashed") +
geom_hline(yintercept = 3, linetype = "dashed") +
xlab("Observaciones") +
ylab("") +
theme(legend.position = "none") +
scale_color_manual(values = c("royalblue", "indianred3"))
#univariate control
#Si observamos el comportamiento de una de las variables por separado, podemos detectar si
#alguna de ellas se ha ido de rango.
#Paquete para dibujos
library("ggplot2")
#Paquete para manipular datos
library("dplyr")
#Paquete para leer archivos xlsx
library("readxl")
#Importa Archivo para trabajar
#Importa Archivo para trabajar
datos = read_excel("../Data Sets Apunte Teórico/galletitas.xlsx")
attach(datos)
#Reagrupa la base
dat = datos %% group_by(Obs, Clase)
#Modificamos Etiquetas
exp_names <- c("A" = "Bajo_Control", "B" = "Fuera_De_Control", "C" = "Fuera_De_Control")
ggplot(dat, aes(x = Obs, y = Valor, group = Clase, colour = Clase)) +
facet_wrap(~Experimento, labeller = as_labeller(exp_names)) +
geom_point() +
geom_hline(yintercept = 1, linetype = "dashed") +
geom_hline(yintercept = 3, linetype = "dashed") +
xlab("Observaciones") +
ylab("") +
theme(legend.position = "none") +
scale_color_manual(values = c("royalblue", "indianred3"))
#univariate control
#Si observamos el comportamiento de una de las variables por separado, podemos detectar si
#alguna de ellas se ha ido de rango.
#Paquete para dibujos
library("ggplot2")
#Paquete para manipular datos
library("dplyr")
#Paquete para leer archivos xlsx
library("readxl")
#Importa Archivo para trabajar
#Importa Archivo para trabajar
datos = read_excel("../Data Sets Apunte Teórico/galletitas.xlsx")
attach(datos)
#Reagrupa la base
dat = datos %% group_by(Obs, Clase)
#Modificamos Etiquetas
exp_names <- c("A" = "Bajo_Control", "B" = "Fuera_De_Control", "C" = "Fuera_De_Control")
ggplot(dat, aes(x = Sodio, y = Valor, group = Clase, colour = Clase)) +
facet_wrap(~Experimento, labeller = as_labeller(exp_names)) +
geom_point() +
geom_hline(yintercept = 1, linetype = "dashed") +
geom_hline(yintercept = 3, linetype = "dashed") +
xlab("Observaciones") +
ylab("") +
theme(legend.position = "none") +
scale_color_manual(values = c("royalblue", "indianred3"))
#univariate control
#Si observamos el comportamiento de una de las variables por separado, podemos detectar si
#alguna de ellas se ha ido de rango.
#Paquete para dibujos
library("ggplot2")
#Paquete para manipular datos
library("dplyr")
#Paquete para leer archivos xlsx
library("readxl")
#Importa Archivo para trabajar
#Importa Archivo para trabajar
datos = read_excel("../Data Sets Apunte Teórico/galletitas.xlsx")
attach(datos)
#Reagrupa la base
dat = datos %% group_by(Sodio, Clase)
#Modificamos Etiquetas
exp_names <- c("A" = "Bajo_Control", "B" = "Fuera_De_Control", "C" = "Fuera_De_Control")
ggplot(dat, aes(x = Sodio, y = Valor, group = Clase, colour = Clase)) +
facet_wrap(~Experimento, labeller = as_labeller(exp_names)) +
geom_point() +
geom_hline(yintercept = 1, linetype = "dashed") +
geom_hline(yintercept = 3, linetype = "dashed") +
xlab("Observaciones") +
ylab("") +
theme(legend.position = "none") +
scale_color_manual(values = c("royalblue", "indianred3"))
#univariate control
#Si observamos el comportamiento de una de las variables por separado, podemos detectar si
#alguna de ellas se ha ido de rango.
#Paquete para dibujos
library("ggplot2")
#Paquete para manipular datos
library("dplyr")
#Paquete para leer archivos xlsx
library("readxl")
#Importa Archivo para trabajar
#Importa Archivo para trabajar
datos = read_excel("../Data Sets Apunte Teórico/galletitas.xlsx")
attach(datos)
#Reagrupa la base
dat = datos %% group_by(Marca1, Clase)
#Modificamos Etiquetas
exp_names <- c("A" = "Bajo_Control", "B" = "Fuera_De_Control", "C" = "Fuera_De_Control")
ggplot(dat, aes(x = Marca1, y = Valor, group = Clase, colour = Clase)) +
facet_wrap(~Experimento, labeller = as_labeller(exp_names)) +
geom_point() +
geom_hline(yintercept = 1, linetype = "dashed") +
geom_hline(yintercept = 3, linetype = "dashed") +
xlab("Observaciones") +
ylab("") +
theme(legend.position = "none") +
scale_color_manual(values = c("royalblue", "indianred3"))
rm(list=ls())
#ScaterPlot
#nos permite identificar variables que siguen el patrón general de interacción pero se alejan del
#centro de las variables; pero también permite identificar puntos que están dentro del rango de
#ambas variables pero la forma de su interacción se separa de la forma general del grupo.
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Paquete de funciones y datos
library(MASS)
#Genera los datos
dat = mvrnorm(n = 60,c(10,5), cbind(c(0.7,0.5), c(0.5,0.4)),tol = 1e-6,
empirical=FALSE,EISPACK=FALSE)
#Arregla los datos
datos=data.frame(dat)
#Produce un diagrama
ggplot(datos,aes(x=X1,y=X2))+
geom_point(colour="royalblue")+
geom_point(aes(x=11.6,y=3.3),colour="indianred3")+
stat_ellipse(aes(x=X1,y=X2),colour="orchid3",type="norm")+
geom_hline(yintercept=3,linetype="dashed",colour="forestgreen")+
geom_hline(yintercept=7,linetype="dashed",colour="forestgreen")+
geom_vline(xintercept=8,linetype="dashed",colour="forestgreen")+
geom_vline(xintercept=12,linetype="dashed",colour="forestgreen")+
xlab("")+
ylab("")
detach(IMCInfantil)
#Correlogram
#el color azul indica correlación positiva, el color rojo indica correlación negativa.
#Cuanto mayor es la intensidad del color más cercano a 1 en el caso positivo y a 􀀀1 en el cas
#o negativo se encuentra la correlación.
rm(list=ls())
setwd("E:/UBA/AnÃ¡lisis Inteligente de Datos/Scripts Apunte TeÃ³rico")
# Importa la base desde el archivo de excel
IMCInfantil = read_excel("../Data Sets Apunte TeÃ³rico/IMCinfantil.xlsx")
#Almacena la base en memoria
attach(IMCInfantil)
#Arma una sub-base con las variables seleccionadas de IMCInfantil
base.niños = data.frame(EDAD, PESO, TALLA, IMC, CC)
#Modifica la variable para que correlacione de forma negativa con las otras
base.niños$CC = max(base.niños$CC) - base.niños$CC
#Calcula la matriz de correlación
M = cor(base.niños)
#Genera el correlograma
corrplot.mixed(M, lower = "number", upper = "shade", addshade = "all")
#Correlogram
#el color azul indica correlación positiva, el color rojo indica correlación negativa.
#Cuanto mayor es la intensidad del color más cercano a 1 en el caso positivo y a 􀀀1 en el cas
#o negativo se encuentra la correlación.
rm(list=ls())
setwd("E:/UBA/AnÃ¡lisis Inteligente de Datos/Scripts Apunte Teórico")
# Importa la base desde el archivo de excel
IMCInfantil = read_excel("../Data Sets Apunte TeÃ³rico/IMCinfantil.xlsx")
#Almacena la base en memoria
attach(IMCInfantil)
#Arma una sub-base con las variables seleccionadas de IMCInfantil
base.niños = data.frame(EDAD, PESO, TALLA, IMC, CC)
#Modifica la variable para que correlacione de forma negativa con las otras
base.niños$CC = max(base.niños$CC) - base.niños$CC
#Calcula la matriz de correlación
M = cor(base.niños)
#Genera el correlograma
corrplot.mixed(M, lower = "number", upper = "shade", addshade = "all")
rm(list=ls())
setwd("E:/UBA/AnÃ¡lisis Inteligente de Datos/Scripts Apunte Teórico")
rm(list=ls())
setwd("E:/UBA/AnÃ¡lisis Inteligente de Datos/Scripts Apunte Teórico")
