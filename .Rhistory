install.packages(plotrix)
install.packages("plotrix")
install.packages("plotrix")
install.packages("plotrix")
library("plotrix", lib.loc="C:/Program Files/R/R-3.4.0/library")
install.packages("plotrix")
setInternet2(set = TRUE)
setInternet2(use = TRUE)
install.packages("plotrix")
Modelos
Modelos<-2010:2016
Modelos
Ventas<-c(2,4,0,9,3,7,6)
plot(Modelos,Ventas,type="h",lty="solid", lwd=4, col=heat.colors(9))
plot(Modelos,Ventas,type="h",lty="solid", lwd=4, col=heat.colors(7))
plot(Modelos,Ventas,type="h",lty="solid", lwd=4, col=heat.colors(1))
plot(Modelos,Ventas,type="h",lty="solid", lwd=4, col=heat.colors(9))
plot(Modelos,Ventas,type="h",lty="solid", lwd=4, col=heat.colors(1))
plot(Modelos,Ventas,type="h",lty="solid", lwd=4, col=heat.colors(10))
plot(Modelos,Ventas,type="h",lty="solid", lwd=4, col=heat.colors(100))
plot(Modelos,Ventas,type="h",lty="solid", lwd=4, col=heat.colors(7))
plot(Modelos,Ventas,type="h",lty="solid", lwd=4, col=heat.colors(9))
hist(PESO, col=maroon1, density=18, border= bluevliolet)
hist(PESO,col="maroon1",breaks=seq(0,85,5),density=18,angle=70)
no.gar=c(258,280)
gar.si=c(184,719)
mat=rbind(no.gar,gar.si)
colnames(mat)=c("no.cons","si.cons")
mosaicplot(mat,col=terrain.colors(2:3),main="Gráfico de mosaicos")
mosaicplot(mat,col=terrain.colors(2:3),main="Gráfico de mosaicos")
install.packages(plotrix)
install.packages("plotrix")
read.csv2("E:/UBA/Análisis Inteligente de Datos/1- 8 de abril - 14 de abril/movies.csv")
moviesDB <- read.csv2("E:/UBA/Análisis Inteligente de Datos/1- 8 de abril - 14 de abril/movies.csv")
attach(moviesDB)
frec.tipo <- (table(3))
etiquetas<-c("Comedy"; "Romance"; "Children"; "Adventure")
etiquetas<-c("Comedy", "Romance", "Children", "Adventure")
pie3D(frec.tipo,labels=etiquetas,explode=0.3,labelcex=0.8,radius=1.5)
install.packages("pie3D")
ap <- available.packages()
ap
install.packages("pie3d")
install.packages("pie3D")
recepcionistasDB <- read.csv2("E:/UBA/Análisis Inteligente de Datos/4- 29 de abril - 5 de mayo/recepcionistas.xls")
recepcionistasDB <- read.csv2("E:/UBA/Análisis Inteligente de Datos/4- 29 de abril - 5 de mayo/recepcionistas.xls")
recepcionistasDB <- read.csv2("E:/UBA/Análisis Inteligente de Datos/4- 29 de abril - 5 de mayo/recepcionistas.csv")
recepcionistasDB
recepcionistasDB
recepcionistasDB <- read.csv2("E:/UBA/Análisis Inteligente de Datos/4- 29 de abril - 5 de mayo/recepcionistas.csv")
recepcionistasDB
View(recepcionistasDB)
total <-rowMeans(recepcionistasDB)
total <-rowMeans(recepcionistasDB, -ncol(1))
total <-rowMeans(recepcionistasDB[, -ncol(1)])
> recepcionistasDB$mean <- rowMeans(subset(recepcionistasDB, select = c(2, 7)), na.rm = TRUE)
recepcionistasDB$mean <- rowMeans(subset(recepcionistasDB, select = c(2, 7)), na.rm = TRUE)
recepSubset = subset(recepcionistasDB, select = c(2,7))
recepSubset
View(recepSubset)
View(recepSubset)
View(recepSubset)
remove(recepSubset)
View(recepSubset)
View(recepcionistasDB)
recepcionistasDB$mean <- rowMeans(subset(recepcionistasDB, select = c(2; 7)), na.rm = TRUE)
recepcionistasDB$mean <- rowMeans(subset(recepcionistasDB, select = c(2: 7)), na.rm = TRUE)
View(recepcionistasDB)
recepcionistasDB$juez1 <- rowMeans(subset(recepcionistasDB, select = c(2: 4)), na.rm = TRUE)
recepcionistasDB$juez2 <- rowMeans(subset(recepcionistasDB, select = c(5: 7)), na.rm = TRUE)
View(recepcionistasDB)
recepcionistasDBNormalizada <- subset(recepcionistasDB, select = c(2:7))
recepcionistasDBNormalizada
view(recepcionistasDBNormalizada)
recepcionistasDBNormalizada <- scale(recepcionistasDBNormalizada)
view(recepcionistasDBNormalizada)
view(recepcionistasDB)
View(recepcionistasDBNormalizada)
meantest <- rowMeans(subset(recepcionistasDBNormalizada, select = c(1: 6)), na.rm = TRUE)
meantest
meantest <- rowMeans(recepcionistasDBNormalizada)
View(meantest)
View(recepcionistasDBNormalizada)
remove(meantest)
recepcionistasDBNormalizada <- scale(recepcionistasDBNormalizada, 0 ,1)
recepcionistasDBNormalizada <- rnorm(recepcionistasDB)
View(recepcionistasDBNormalizada)
View(recepcionistasDB)
recepcionistasDBNormalizada <- rnorm(subset(recepcionistasDB, select = c(2:7)))
View(recepcionistasDBNormalizada)
remove(recepcionistasDBNormalizada)
pointsRecepcionistas <- subset(recepcionistasDB, select = c(2:7))
View(pointsRecepcionistas)
normalizedPoints <- rnorm(pointsRecepcionistas)
View(normalizedPoints)
remove(normalizedPoints)
View(recepcionistasDB)
normalizedDB <- apply(recepcionistasDB, [,2], 1 , scale)
normalizedDB <- apply(recepcionistasDB[,2], 1 , scale)
install.packages("scales")
normalizedRecepcionistasDB <- rescale(pointsRecepcionistas)
library("scales")
normalizedRecepcionistasDB <- rescale(pointsRecepcionistas)
View(pointsRecepcionistas)
normalizedRecepcionistasDB <- rescale(pointsRecepcionistas, to c (-1,1))
normalizedRecepcionistasDB <- rescale(pointsRecepcionistas, to=c(-1,1))
normalizedRecepcionistasDB <- apply(pointsRecepcionistas, 2, sum)
normalizedRecepcionistasDB
normalizedRecepcionistasDB <- apply(pointsRecepcionistas, 2, rescale)
normalizedRecepcionistasDB
normalizedRecepcionistasDB <- apply(pointsRecepcionistas, 2, rescale, (-1,1))
normalizedRecepcionistasDB <- apply(pointsRecepcionistas, 2, rescale(-1,1))
normalizedRecepcionistasDB <- apply(pointsRecepcionistas, 2, rescale, to=c(-1,1))
normalizedRecepcionistasDB
rowMeans <- apply(normalizedRecepcionistasDB, 2 , colMeans)
View(normalizedRecepcionistasDB)
pointsRecepcionistas
install.packages("ca")
library("ca")
fum = matrix  (c(4,2,3,2,4,3,7,4,25,10,12,4,18,24,33,13,10,6,7,2))
fum
View fum
View(fum)
fum = matrix  (c(4,2,3,2,4,3,7,4,25,10,12,4,18,24,33,13,10,6,7,2), nrow = 5, ncol = 4, byrow = TRUE)
View(fum)
tabum = addmargins(fum)
View(tabum)
colnames(fum) = c("NoFuma", "Poco", "Medio", "Mucho", "TotalFila")
colnames(tabum) = c("NoFuma", "Poco", "Medio", "Mucho", "TotalFila")
rownames(tabum) = c("G.Senior", "G.Junior", "EmpSenior", "EmpJunior", "Secretarira", "Total_Col")
View(tabum)
objeto = ca(tabum, nd=2)
plot(objeto, main="Biplot Simétrico")
Arbequina=c(34.5, 20.1, 21.8 ,18.2 ,19.5 ,20.2,22.5 ,23.9 ,22.1 ,24.2)
Carolea=c (16.4, 14.8, 17.8, 12.3, 11.9, 15.5, 13.4,16 ,15.8 ,16.2)
shapiro.test(Arbequina) # testeamos la normalidad de los datos
shapiro.test(CArolea) # testeamos la normalidad de los datos
shapiro.test(Carolea) # testeamos la normalidad de los datos
wilcox.test(Arbequina,Carolea, alternative="two.sided") # aplicamos el test de Mann Whitney
Wilcoxon bilateral
wilcox.test(Arbequina,Carolea, alternative="two.sided") # aplicamos el test de Mann Whitney
#Los datos no satisfacen el supuesto de normalidad distribucional, luego no puede aplicarse un test t.
library(RVAideMemoire)
install.packages("RVAdeMemoire")
install.packages("RVAideMemoire")
library(RVAideMemoire)
#te.aov<-aov(vitam  marca) # cargamos el análisis de la varianza en el objeto te.aov
#summary(te.aov) # pedimos la síntesis de la prueba
#bartlett.test(vitam,marca)
install.packages("Rcmdr)")
install.packages("Rcmdr")
install.packages("reshape2")
install.packages("car")
install.packages("car")
library("Rcmdr")
install.packages("nortest")
library("readxl")
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
library("readxl")
IMCInfantil = read_excel("../Data Sets Apunte Teórico/IMCinfantil.xlsx")
attach(IMCInfantil)
barplot(table(CatPeso),
ylab = ("Cantidad"),
names.arg = c("Deficiente", "Normal", "Obeso", "Con_Sobrepeso"),
col = c("palegreen1", "paleturquiose", "plum2", "lightpink1"))
#Gráfica diagrama de barras
barplot(table(CatPeso),
ylab = ("Cantidad"),
names.arg = c("Deficiente", "Normal", "Obeso", "Con_Sobrepeso"),
col = c("palegreen1", "paleturquoise", "plum2", "lightpink1"))
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
library("readxl")
library("ggplot2")
datos = data.frame(table(SEXO, CatPeso))
ggplot(data = datos, aes(x=CatPeso, y=Freq, fill=SEXO)) +
geom_bar(stat="identity", colour="blue") +
scale_fill_brewer(palette="Paired") +
xlab("Categoria_de_peso") +
ylab("")
ggplot(data = datos, aes(x=CatPeso, y=Freq, fill=SEXO)) +
geom_bar(stat="identity", colour="green") +
scale_fill_brewer(palette="Paired") +
xlab("Categoria_de_peso") +
ylab("")
ggplot(data = datos, aes(x=CatPeso, y=Freq, fill=SEXO, colour = "green")) +
geom_bar(stat="identity", colour="green") +
scale_fill_brewer(palette="Paired") +
xlab("Categoria_de_peso") +
ylab("")
ggplot(data = datos, aes(x=CatPeso, y=Freq, fill=SEXO, colours = "green")) +
geom_bar(stat="identity", colour="green") +
scale_fill_brewer(palette="Paired") +
xlab("Categoria_de_peso") +
ylab("")
ggplot(data = datos, aes(x=CatPeso, y=Freq, fill=SEXO)) +
geom_bar(stat="identity", colour="blue") +
scale_fill_brewer(palette="Paired") +
xlab("Categoria_de_peso") +
ylab("")
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
library("readxl")
library("ggplot2")
#Overlapping Bars
#En este tipo de esquemas, las barras pueden estar en posición vertical u horizontal
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
library("readxl")
library("ggplot2")
#Importa Archivo para trabajar
IMCInfantil = read_excel("../Data Sets Apunte Teórico/IMCinfantil.xlsx")
#Se pone la base en memoria
attach(IMCInfantil)
datos = data.frame(table(SEXO, CatPeso))
#Gráfica Barras Adjacentes
ggplot(data = datos, aes(x=CatPeso, y=Freq, fill=SEXO)) +
geom_bar(stat = "identity", colour = "blue", position = "dodge") +
coord_flip() +
scale_fill_brewer(pallete = "Paired") +
xlab("Categoria_De_Peso") +
ylab("")
e tipo de esquemas, las barras pueden estar en posición vertical u horizontal
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
library("readxl")
library("ggplot2")
IMCInfantil = read_excel("../Data Sets Apunte Teórico/IMCinfantil.xlsx")
#Se pone la base en memoria
attach(IMCInfantil)
#Importa Archivo para trabajar
IMCInfantil = read_excel("../Data Sets Apunte Teórico/IMCinfantil.xlsx")
datos = data.frame(table(SEXO, CatPeso))
attach(IMCInfantil)
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
library("readxl")
library("ggplot2")
IMCInfantil = read_excel("../Data Sets Apunte Teórico/IMCinfantil.xlsx")
attach(IMCInfantil)
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
detach(IMCInfantil)
library("readxl")
library("ggplot2")
#Importa Archivo para trabajar
IMCInfantil = read_excel("../Data Sets Apunte Teórico/IMCinfantil.xlsx")
#Se pone la base en memoria
attach(IMCInfantil)
datos = data.frame(table(SEXO, CatPeso))
ggplot(data = datos, aes(x=CatPeso, y=Freq, fill=SEXO)) +
geom_bar(stat = "identity", colour = "blue", position = "dodge") +
coord_flip() +
scale_fill_brewer(pallete = "Paired") +
xlab("Categoria_De_Peso") +
ylab("")
#Gráfica Barras Adjacentes
ggplot(data = datos, aes(x=CatPeso, y=Freq, fill=SEXO)) +
geom_bar(stat = "identity", colour = "blue", position = "dodge") +
coord_flip() +
scale_fill_brewer(palette = "Paired") +
xlab("Categoria_De_Peso") +
ylab("")
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Ingresa datos
Modelo = 2010:2016
Ventas = c(2,3,7,4,9,0,5)
plot(Modelo, Ventas, type="h", lty="solid", lwd=4,
col=c("palegreen1", "paleturquoise", "plum2",
"lightpink1", "deepskyblue3", "darkorchid2", "indianred1"))
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
detach(IMCInfantil)
library("readxl")
#Importa Archivo para trabajar
IMCInfantil = read_excel("../Data Sets Apunte Teórico/IMCinfantil.xlsx")
attach(IMCInfantil)
#Gráficar histograma
hist(PESO, col = "paleturquoise3", border = "royalblue", breaks = seq(0.85,5),
density = 20, angle = 70, ylab = "", main = "")
#Toma los puntos medios de las barras
pto.medio = seq(2.5, 82.5, 5)
alt.dens = hist(PESO, breaks = seq(0, 85, 5), plot =F)$counts
#Busca la altura de las barras
points(pto.medio, alt.dens, type = "1", lwd = 2, col = "mediumslateblue")
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
detach(IMCInfantil)
library("readxl")
#Importa Archivo para trabajar
IMCInfantil = read_excel("../Data Sets Apunte Teórico/IMCinfantil.xlsx")
attach(IMCInfantil)
#Gráficar histograma
hist(PESO, col = "paleturquoise3", border = "royalblue", breaks = seq(0,85,5),
density = 20, angle = 70, ylab = "", main = "")
#Toma los puntos medios de las barras
pto.medio = seq(2.5, 82.5, 5)
alt.dens = hist(PESO, breaks = seq(0, 85, 5), plot =F)$counts
#Busca la altura de las barras
points(pto.medio, alt.dens, type = "1", lwd = 2, col = "mediumslateblue")
#
#Se utiliza para representar distribuciones de frecuencias correspondientes a
#variables continuas. Uniendo los puntos medios de las bases superiores de los
#rectángulos del histograma se construye un polígono de frecuencias.
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
detach(IMCInfantil)
library("readxl")
#Importa Archivo para trabajar
IMCInfantil = read_excel("../Data Sets Apunte Teórico/IMCinfantil.xlsx")
attach(IMCInfantil)
#Gráficar histograma
hist(PESO, col = "paleturquoise3", border = "royalblue", breaks = seq(0,85,5),
density = 20, angle = 70, ylab = "", main = "")
#Toma los puntos medios de las barras
pto.medio = seq(2.5, 82.5, 5)
alt.dens = hist(PESO, breaks = seq(0, 85, 5), plot =F)$counts
#Busca la altura de las barras
points(pto.medio, alt.dens, type = "1", lwd = 2, col = "mediumslateblue")
#Busca la altura de las barras
points(pto.medio, alt.dens, type = 1, lwd = 2, col = "mediumslateblue")
#Busca la altura de las barras
points(pto.medio, alt.dens, type="2", lwd = 2, col = "mediumslateblue")
#Busca la altura de las barras
points(pto.medio, alt.dens, type="1", lwd = 2, col = "mediumslateblue")
#Busca la altura de las barras
points(pto.medio, alt.dens, type="l", lwd = 2, col = "mediumslateblue")
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Permite realizar diagramas conjuntos
par(mfrow = c(1,3))
hist(iris$Sepal.Length, nclass = 4, prob = TRUE, ylab = "Densidad",
col = "lightsteelblue", border = "lightsteelblue4",
xlab = "Longitud_del_sépalo", main = "4_clases")
hist(iris$Sepal.Length, nclass = 30, prob = TRUE, ylab = "Densidad",
col = "lightsteelblue", border = "lightsteelblue4",
xlab = "Longitud_del_sépalo", main = "30_clases")
hist(iris$Sepal.Length, breaks = "FD", prob = TRUE, ylab = "Densidad",
col = "lightsteelblue", border = "lightsteelblue4",
xlab = "Longitud_del_sépalo", main = "Freedman-Diaconis")
#Mosaic graph
#Se utiliza para representar distribuciones conjuntas multivariadas
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Carga de datos
gar.no = c(258, 280)
gar.si = c(184, 719)
#Combina los datos
mat = rbind(gar.no, gar.si)
#Pone nombre a las columnas
colnames(mat) = c("No_Considera_Consumo", "Considera_Consumo")
#Pone nombre a las filas
rownames(mat) = c("No_Considera_Garantía", "Considera_Garantía")
#Genera Diagrama de Mosaicos
mosaicplot(mat, col = c("skyline", "royalblue"), cex.axis = 0.8, main = "")
#Mosaic graph
#Se utiliza para representar distribuciones conjuntas multivariadas
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Carga de datos
gar.no = c(258, 280)
gar.si = c(184, 719)
#Combina los datos
mat = rbind(gar.no, gar.si)
#Pone nombre a las columnas
colnames(mat) = c("No_Considera_Consumo", "Considera_Consumo")
#Pone nombre a las filas
rownames(mat) = c("No_Considera_Garantía", "Considera_Garantía")
#Genera Diagrama de Mosaicos
mosaicplot(mat, col = c("skyblue", "royalblue"), cex.axis = 0.8, main = "")
#Mosaic graph
#Se utiliza para representar distribuciones conjuntas multivariadas
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Carga de datos
gar.no = c(258, 280)
gar.si = c(184, 719)
#Combina los datos
mat = rbind(gar.no, gar.si)
#Pone nombre a las columnas
colnames(mat) = c("No_Considera_Consumo", "Considera_Consumo")
#Pone nombre a las filas
rownames(mat) = c("No_Considera_Garantía", "Considera_Garantía")
#Genera Diagrama de Mosaicos
mosaicplot(mat, col = c("skyblue", "royalblue"), cex.axis = 0.8, main = "")
#Mosaic graph
#Se utiliza para representar distribuciones conjuntas multivariadas
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Carga de datos
gar.no = c(258, 280)
gar.si = c(184, 719)
#Combina los datos
mat = rbind(gar.no, gar.si)
#Pone nombre a las columnas
colnames(mat) = c("No_Considera_Consumo", "Considera_Consumo")
#Pone nombre a las filas
rownames(mat) = c("No_Considera_Garantía", "Considera_Garantía")
#Genera Diagrama de Mosaicos
mosaicplot(mat, col = c("skyblue", "royalblue"), cex.axis = 0.8, main = "")
#Mosaic graph
#Se utiliza para representar distribuciones conjuntas multivariadas
par(mfrow = c(1,5))
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Carga de datos
gar.no = c(258, 280)
gar.si = c(184, 719)
#Combina los datos
mat = rbind(gar.no, gar.si)
#Pone nombre a las columnas
colnames(mat) = c("No_Considera_Consumo", "Considera_Consumo")
#Pone nombre a las filas
rownames(mat) = c("No_Considera_Garantía", "Considera_Garantía")
#Genera Diagrama de Mosaicos
mosaicplot(mat, col = c("skyblue", "royalblue"), cex.axis = 0.8, main = "")
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Carga de datos
gar.no = c(258, 280)
gar.si = c(184, 719)
#Combina los datos
mat = rbind(gar.no, gar.si)
#Pone nombre a las columnas
colnames(mat) = c("No_Considera_Consumo", "Considera_Consumo")
#Pone nombre a las filas
rownames(mat) = c("No_Considera_Garantía", "Considera_Garantía")
#Genera Diagrama de Mosaicos
mosaicplot(mat, col = c("skyblue", "royalblue"), cex.axis = 0.8, main = "")
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Carga de datos
gar.no = c(258, 280)
gar.si = c(184, 719)
#Combina los datos
mat = rbind(gar.no, gar.si)
#Pone nombre a las columnas
colnames(mat) = c("No_Considera_Consumo", "Considera_Consumo")
#Pone nombre a las filas
rownames(mat) = c("No_Considera_Garantía", "Considera_Garantía")
#Genera Diagrama de Mosaicos
mosaicplot(mat, col = c("skyblue", "royalblue"), cex.axis = 0.8, main = "")
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Carga de datos
gar.no = c(258, 280)
gar.si = c(184, 719)
#Combina los datos
mat = rbind(gar.no, gar.si)
#Pone nombre a las columnas
colnames(mat) = c("No_Considera_Consumo", "Considera_Consumo")
#Pone nombre a las filas
rownames(mat) = c("No_Considera_Garantía", "Considera_Garantía")
#Genera Diagrama de Mosaicos
mosaicplot(mat, col = c("skyblue", "royalblue"), cex.axis = 0.8, main = "")
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Carga de datos
gar.no = c(258, 280)
gar.si = c(184, 719)
#Combina los datos
mat = rbind(gar.no, gar.si)
#Pone nombre a las columnas
colnames(mat) = c("No_Considera_Consumo", "Considera_Consumo")
#Pone nombre a las filas
rownames(mat) = c("No_Considera_Garantía", "Considera_Garantía")
#Genera Diagrama de Mosaicos
mosaicplot(mat, col = c("skyblue", "royalblue"), cex.axis = 0.8, main = "")
#Mosaic graph
#Se utiliza para representar distribuciones conjuntas multivariadas
par(mfrow = c(1,1))
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Carga de datos
gar.no = c(258, 280)
gar.si = c(184, 719)
#Combina los datos
mat = rbind(gar.no, gar.si)
#Pone nombre a las columnas
colnames(mat) = c("No_Considera_Consumo", "Considera_Consumo")
#Pone nombre a las filas
rownames(mat) = c("No_Considera_Garantía", "Considera_Garantía")
#Genera Diagrama de Mosaicos
mosaicplot(mat, col = c("skyblue", "royalblue"), cex.axis = 0.8, main = "")
#Dispersion Diagram
#Permite apreciar las carácteristidas de las variables de los dos ejes
#Permite ver agrupaciones de individuos de acuerdo a las dos variables de los ejes
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
library("ggplot2")
#Declara la cilindrada como un factor
mtcars$cilind =factor(mtcars$cyl)
#Produce el diagrama de dispersión
ggplot(mtcars, aes(wt, mpg)) +
geom_point(aes(colour = cilind)) +
xlab("Peso") +
ylab("Millas_Por_Galón") +
labs(colour = "Cilindrada")
