install.packages(plotrix)
install.packages("plotrix")
install.packages("plotrix")
install.packages("plotrix")
library("plotrix", lib.loc="C:/Program Files/R/R-3.4.0/library")
install.packages("plotrix")
setInternet2(set = TRUE)
setInternet2(use = TRUE)
install.packages("plotrix")
Modelos
Modelos<-2010:2016
Modelos
Ventas<-c(2,4,0,9,3,7,6)
plot(Modelos,Ventas,type="h",lty="solid", lwd=4, col=heat.colors(9))
plot(Modelos,Ventas,type="h",lty="solid", lwd=4, col=heat.colors(7))
plot(Modelos,Ventas,type="h",lty="solid", lwd=4, col=heat.colors(1))
plot(Modelos,Ventas,type="h",lty="solid", lwd=4, col=heat.colors(9))
plot(Modelos,Ventas,type="h",lty="solid", lwd=4, col=heat.colors(1))
plot(Modelos,Ventas,type="h",lty="solid", lwd=4, col=heat.colors(10))
plot(Modelos,Ventas,type="h",lty="solid", lwd=4, col=heat.colors(100))
plot(Modelos,Ventas,type="h",lty="solid", lwd=4, col=heat.colors(7))
plot(Modelos,Ventas,type="h",lty="solid", lwd=4, col=heat.colors(9))
hist(PESO, col=maroon1, density=18, border= bluevliolet)
hist(PESO,col="maroon1",breaks=seq(0,85,5),density=18,angle=70)
no.gar=c(258,280)
gar.si=c(184,719)
mat=rbind(no.gar,gar.si)
colnames(mat)=c("no.cons","si.cons")
mosaicplot(mat,col=terrain.colors(2:3),main="Gráfico de mosaicos")
mosaicplot(mat,col=terrain.colors(2:3),main="Gráfico de mosaicos")
install.packages(plotrix)
install.packages("plotrix")
read.csv2("E:/UBA/Análisis Inteligente de Datos/1- 8 de abril - 14 de abril/movies.csv")
moviesDB <- read.csv2("E:/UBA/Análisis Inteligente de Datos/1- 8 de abril - 14 de abril/movies.csv")
attach(moviesDB)
frec.tipo <- (table(3))
etiquetas<-c("Comedy"; "Romance"; "Children"; "Adventure")
etiquetas<-c("Comedy", "Romance", "Children", "Adventure")
pie3D(frec.tipo,labels=etiquetas,explode=0.3,labelcex=0.8,radius=1.5)
install.packages("pie3D")
ap <- available.packages()
ap
install.packages("pie3d")
install.packages("pie3D")
recepcionistasDB <- read.csv2("E:/UBA/Análisis Inteligente de Datos/4- 29 de abril - 5 de mayo/recepcionistas.xls")
recepcionistasDB <- read.csv2("E:/UBA/Análisis Inteligente de Datos/4- 29 de abril - 5 de mayo/recepcionistas.xls")
recepcionistasDB <- read.csv2("E:/UBA/Análisis Inteligente de Datos/4- 29 de abril - 5 de mayo/recepcionistas.csv")
recepcionistasDB
recepcionistasDB
recepcionistasDB <- read.csv2("E:/UBA/Análisis Inteligente de Datos/4- 29 de abril - 5 de mayo/recepcionistas.csv")
recepcionistasDB
View(recepcionistasDB)
total <-rowMeans(recepcionistasDB)
total <-rowMeans(recepcionistasDB, -ncol(1))
total <-rowMeans(recepcionistasDB[, -ncol(1)])
> recepcionistasDB$mean <- rowMeans(subset(recepcionistasDB, select = c(2, 7)), na.rm = TRUE)
recepcionistasDB$mean <- rowMeans(subset(recepcionistasDB, select = c(2, 7)), na.rm = TRUE)
recepSubset = subset(recepcionistasDB, select = c(2,7))
recepSubset
View(recepSubset)
View(recepSubset)
View(recepSubset)
remove(recepSubset)
View(recepSubset)
View(recepcionistasDB)
recepcionistasDB$mean <- rowMeans(subset(recepcionistasDB, select = c(2; 7)), na.rm = TRUE)
recepcionistasDB$mean <- rowMeans(subset(recepcionistasDB, select = c(2: 7)), na.rm = TRUE)
View(recepcionistasDB)
recepcionistasDB$juez1 <- rowMeans(subset(recepcionistasDB, select = c(2: 4)), na.rm = TRUE)
recepcionistasDB$juez2 <- rowMeans(subset(recepcionistasDB, select = c(5: 7)), na.rm = TRUE)
View(recepcionistasDB)
recepcionistasDBNormalizada <- subset(recepcionistasDB, select = c(2:7))
recepcionistasDBNormalizada
view(recepcionistasDBNormalizada)
recepcionistasDBNormalizada <- scale(recepcionistasDBNormalizada)
view(recepcionistasDBNormalizada)
view(recepcionistasDB)
View(recepcionistasDBNormalizada)
meantest <- rowMeans(subset(recepcionistasDBNormalizada, select = c(1: 6)), na.rm = TRUE)
meantest
meantest <- rowMeans(recepcionistasDBNormalizada)
View(meantest)
View(recepcionistasDBNormalizada)
remove(meantest)
recepcionistasDBNormalizada <- scale(recepcionistasDBNormalizada, 0 ,1)
recepcionistasDBNormalizada <- rnorm(recepcionistasDB)
View(recepcionistasDBNormalizada)
View(recepcionistasDB)
recepcionistasDBNormalizada <- rnorm(subset(recepcionistasDB, select = c(2:7)))
View(recepcionistasDBNormalizada)
remove(recepcionistasDBNormalizada)
pointsRecepcionistas <- subset(recepcionistasDB, select = c(2:7))
View(pointsRecepcionistas)
normalizedPoints <- rnorm(pointsRecepcionistas)
View(normalizedPoints)
remove(normalizedPoints)
View(recepcionistasDB)
normalizedDB <- apply(recepcionistasDB, [,2], 1 , scale)
normalizedDB <- apply(recepcionistasDB[,2], 1 , scale)
install.packages("scales")
normalizedRecepcionistasDB <- rescale(pointsRecepcionistas)
library("scales")
normalizedRecepcionistasDB <- rescale(pointsRecepcionistas)
View(pointsRecepcionistas)
normalizedRecepcionistasDB <- rescale(pointsRecepcionistas, to c (-1,1))
normalizedRecepcionistasDB <- rescale(pointsRecepcionistas, to=c(-1,1))
normalizedRecepcionistasDB <- apply(pointsRecepcionistas, 2, sum)
normalizedRecepcionistasDB
normalizedRecepcionistasDB <- apply(pointsRecepcionistas, 2, rescale)
normalizedRecepcionistasDB
normalizedRecepcionistasDB <- apply(pointsRecepcionistas, 2, rescale, (-1,1))
normalizedRecepcionistasDB <- apply(pointsRecepcionistas, 2, rescale(-1,1))
normalizedRecepcionistasDB <- apply(pointsRecepcionistas, 2, rescale, to=c(-1,1))
normalizedRecepcionistasDB
rowMeans <- apply(normalizedRecepcionistasDB, 2 , colMeans)
View(normalizedRecepcionistasDB)
pointsRecepcionistas
install.packages("ca")
library("ca")
fum = matrix  (c(4,2,3,2,4,3,7,4,25,10,12,4,18,24,33,13,10,6,7,2))
fum
View fum
View(fum)
fum = matrix  (c(4,2,3,2,4,3,7,4,25,10,12,4,18,24,33,13,10,6,7,2), nrow = 5, ncol = 4, byrow = TRUE)
View(fum)
tabum = addmargins(fum)
View(tabum)
colnames(fum) = c("NoFuma", "Poco", "Medio", "Mucho", "TotalFila")
colnames(tabum) = c("NoFuma", "Poco", "Medio", "Mucho", "TotalFila")
rownames(tabum) = c("G.Senior", "G.Junior", "EmpSenior", "EmpJunior", "Secretarira", "Total_Col")
View(tabum)
objeto = ca(tabum, nd=2)
plot(objeto, main="Biplot Simétrico")
Arbequina=c(34.5, 20.1, 21.8 ,18.2 ,19.5 ,20.2,22.5 ,23.9 ,22.1 ,24.2)
Carolea=c (16.4, 14.8, 17.8, 12.3, 11.9, 15.5, 13.4,16 ,15.8 ,16.2)
shapiro.test(Arbequina) # testeamos la normalidad de los datos
shapiro.test(CArolea) # testeamos la normalidad de los datos
shapiro.test(Carolea) # testeamos la normalidad de los datos
wilcox.test(Arbequina,Carolea, alternative="two.sided") # aplicamos el test de Mann Whitney
Wilcoxon bilateral
wilcox.test(Arbequina,Carolea, alternative="two.sided") # aplicamos el test de Mann Whitney
#Los datos no satisfacen el supuesto de normalidad distribucional, luego no puede aplicarse un test t.
library(RVAideMemoire)
install.packages("RVAdeMemoire")
install.packages("RVAideMemoire")
library(RVAideMemoire)
#te.aov<-aov(vitam  marca) # cargamos el análisis de la varianza en el objeto te.aov
#summary(te.aov) # pedimos la síntesis de la prueba
#bartlett.test(vitam,marca)
install.packages("Rcmdr)")
install.packages("Rcmdr")
install.packages("reshape2")
install.packages("car")
install.packages("car")
library("Rcmdr")
install.packages("nortest")
install_github("vqv/ggbiplot")
library("devtools")
#Instala desde github
install_github("vqv/ggbiplot")
#Paquete para gráficos
library("ggplot2")
#Herramientas para desarollo de paquetes
library("devtools")
#Instala desde github
install_github("vqv/ggbiplot")
#Paquete para vizualización de componentes principales
library("ggbiplot")
nad = read_excel("DataSets/nadadores.xlsx")
nadadores = data.frame(nad[,2:5])
#Realiza el análisis de componentes principales
nad.pca.cov = prcomp(nadadores, center = TRUE, scale. = FALSE)
#Realiza el análisis de componentes principales con las variables estandarizadas
nad.pca.cor = prcomp(nadadores, center = TRUE, scale. = FALSE)
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Paquete para gráficos
library("ggplot2")
#Herramientas para desarollo de paquetes
library("devtools")
#Instala desde github
install_github("vqv/ggbiplot")
#Paquete para vizualización de componentes principales
library("ggbiplot")
nad = read_excel("DataSets/nadadores.xlsx")
nadadores = data.frame(nad[,2:5])
#Realiza el análisis de componentes principales
nad.pca.cov = prcomp(nadadores, center = TRUE, scale. = FALSE)
#Realiza el análisis de componentes principales con las variables estandarizadas
nad.pca.cor = prcomp(nadadores, center = TRUE, scale. = FALSE)
nad = read_excel("DataSets/nadadores.xlsx")
nadadores = data.frame(nad[,2:5])
#Análisis de componentes principales
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Paquete para gráficos
library("ggplot2")
#Herramientas para desarollo de paquetes
library("devtools")
#Instala desde github
install_github("vqv/ggbiplot")
#Paquete para vizualización de componentes principales
library("ggbiplot")
nad = read_excel("DataSets/nadadores.xlsx")
nadadores = data.frame(nad[,2:5])
#Realiza el análisis de componentes principales
nad.pca.cov = prcomp(nadadores, center = TRUE, scale. = FALSE)
#Realiza el análisis de componentes principales con las variables estandarizadas
nad.pca.cor = prcomp(nadadores, center = TRUE, scale. = FALSE)
#Realiza un resumen de las variabilidades explicadas por las componentes principales
#ACP
summary(nad.pca.cov)
#ACP Variables estandarizadas
summary(nad.pca.cor)
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Paquete para gráficos
library("ggplot2")
#Herramientas para desarollo de paquetes
library("devtools")
nad = read_excel("DataSets/nadadores.xlsx")
nadadores = data.frame(nad[,2:5])
library("readxl")
nad = read_excel("DataSets/nadadores.xlsx")
nadadores = data.frame(nad[,2:5])
#Realiza el análisis de componentes principales
nad.pca.cov = prcomp(nadadores, center = TRUE, scale. = FALSE)
#Realiza el análisis de componentes principales con las variables estandarizadas
nad.pca.cor = prcomp(nadadores, center = TRUE, scale. = FALSE)
#Realiza un resumen de las variabilidades explicadas por las componentes principales
#ACP
summary(nad.pca.cov)
#ACP Variables estandarizadas
summary(nad.pca.cor)
loadings(nad.pca.cor)
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
M = as.table(rbind(c(12,88), c(25,25)))
dimnames(M) = list(Fumador = c("si", "No"), enfermedad = c("Si padece", "No Padece"))
(Xsq <- chisq.test(M))
Xsq$expected
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
M2 = as.table(rbind(c(8,12,20), c(18,15,7)))
dimnames = list(Violencia = c("Poca", "Mucha"), grupo_etareo = c("Joven", "Adulto", "Mayor"))
(Xsq <- chisq.test(M2))
Xsq$expected
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
m = as.matrix(m)
library("ca")
library("FactoMineR")
library("factoextra")
library("ggplot2")
install.packages("ggplot2")
install.packages("FactoMineR")
library("ca")
library("FactoMineR")
library("ggplot2")
library("factoextra")
#Filas de la base
atento = c(64,57,57,72,36,21)
leve = c(94,94,105,141,97,51)
moderado = c(58,54,65,77,54,34)
disperso = c(46,40,60,94,78,51)
base = rbind(atento, leve, moderado, disperso)
colnames(base) = c("A", "B", "C", "D", "E", "F")
base
#Realizamos un análisis de correspondencias
aten.ca <-CA(base, grap = FALSE)
get_ca_row(aten.ca)
get_ca_col(aten.ca)
library("devtools")
install_github("kassambara/factoextra")
install.packages("factoextra")
library("factoextra")
#Realizamos un análisis de correspondencias
aten.ca <-CA(base, grap = FALSE)
get_ca_row(aten.ca)
get_ca_col(aten.ca)
aten.ca
aten.ca$col
aten.ca$row
fbiz_contrib(aten.ca, choice = "row", axes = 1)
fbiz_contrib(aten.ca, choice = "col", axes = 1)
library("FactoMineR")
library("ca")
library("FactoMineR")
library("ggplot2")
library("factoextra")
library("enexprs")
install.packages("enexprs")
aten.ca <-CA(base, grap = FALSE)
get_ca_row(aten.ca)
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
Arbequina = c(34.5, 20.1, 21.8, 18.2, 19.5, 20.2, 22.5, 23.9, 22.1, 24.1)
Carolea = c(16.4, 14.8, 17.8, 12.3, 11.9, 15.5, 13.4, 16, 15.8, 16.8)
shapiro.test(Arbequina)
shapiro.test(Carolea)
wilcox.test(Arbequina, Carolea, alternative = "two.sided")
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
library("stats")
barlett.test(vitam,marca)
bartlett.test(vitam,marca)
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
Arbequina = c(34.5, 20.1, 21.8, 18.2, 19.5, 20.2, 22.5, 23.9, 22.1, 24.1)
Carolea = c(16.4, 14.8, 17.8, 12.3, 11.9, 15.5, 13.4, 16, 15.8, 16.8)
#Testeanos normalidad en los datos
shapiro.test(Arbequina)#No satisface supuesto de normalidad
shapiro.test(Carolea) #No satisface supuesto de normalidad
#Por no satisfacer el supuesto de normalidad se requiere un test de Wilcox
wilcox.test(Arbequina, Carolea, alternative = "two.sided")
library("stats")
bartlett.test(Arbequina)
library("Rcmdr")
library("reshape2")
library("car")
marcas <- as.factor(marca)
marcas <- as.factor(marcas)
cars
marcas <- as.factor(cars)
marcas <- as.factor("marca")
marcas
library("nortest")
library("moments")
install.packages("moments")
library("moments")
shapiro.test(residuals(te.aov))
dieta1 = c(13.4, 11, 15.3, 16.7, 13.4, 20.1, 13.6, 18.3)
dieta2 = c(10.4, 14.2, 20.5, 19.6, 18.5, 24, 23.4, 13.6)
dieta3 = c(7.5, 7.2, 6.7, 7.6, 11.2, 9.6, 6.8, 8.5)
ColesterolConejos = rbind(dieta1, dieta2, dieta3)
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Colesterol Conejo
dieta1 = c(13.4, 11, 15.3, 16.7, 13.4, 20.1, 13.6, 18.3)
dieta2 = c(10.4, 14.2, 20.5, 19.6, 18.5, 24, 23.4, 13.6)
dieta3 = c(7.5, 7.2, 6.7, 7.6, 11.2, 9.6, 6.8, 8.5)
ColesterolConejos = rbind(dieta1, dieta2, dieta3)
ColesterolConejos
t(ColesterolConejos)
boxplot(col = topo.colors(3), main = "Diámetro aórtico por dieta")
boxplot(ColesterolConejos, col = topo.colors(3), main = "Diámetro aórtico por dieta")
t(ColesterolConejos)
ColesterolConejos
ColesterolConejos <- t(ColesterolConejos)
boxplot(ColesterolConejos, col = topo.colors(3), main = "Diámetro aórtico por dieta")
attach(dietas)
colesterol.aov = aov(colest ~ c(dieta1, dieta2, dieta3), data = ColesterolConejos)
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
dieta1 = c(13.4, 11, 15.3, 16.7, 13.4, 20.1, 13.6, 18.3)
dieta2 = c(10.4, 14.2, 20.5, 19.6, 18.5, 24, 23.4, 13.6)
dieta3 = c(7.5, 7.2, 6.7, 7.6, 11.2, 9.6, 6.8, 8.5)
dietas = c(dieta1, dieta2, dieta3)
ColesterolConejos = rbind(dieta1, dieta2, dieta3, dietas)
ColesterolConejos
ColesterolConejos <- t(ColesterolConejos)
ColesterolConejos
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Colesterol Conejo
dieta1 = c(13.4, 11, 15.3, 16.7, 13.4, 20.1, 13.6, 18.3)
dieta2 = c(10.4, 14.2, 20.5, 19.6, 18.5, 24, 23.4, 13.6)
dieta3 = c(7.5, 7.2, 6.7, 7.6, 11.2, 9.6, 6.8, 8.5)
dietas = c(dieta1, dieta2, dieta3)
ColesterolConejos = rbind(dieta1, dieta2, dieta3)
ColesterolConejos <- t(ColesterolConejos)
ColesterolConejos = rbind(ColesterolConejos, dietas)
ColesterolConejos
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
#Colesterol Conejo
dieta1 = c(13.4, 11, 15.3, 16.7, 13.4, 20.1, 13.6, 18.3)
dieta2 = c(10.4, 14.2, 20.5, 19.6, 18.5, 24, 23.4, 13.6)
dieta3 = c(7.5, 7.2, 6.7, 7.6, 11.2, 9.6, 6.8, 8.5)
dietas = c(dieta1, dieta2, dieta3)
ColesterolConejos = rbind(dieta1, dieta2, dieta3)
ColesterolConejos <- t(ColesterolConejos)
ColesterolConejos
as.data.frame(ColesterolConejos, row.names = dietas,stringsAsFactors = default.stringsAsFactors())
View(ColesterolConejos)
View(ColesterolConejos)
colesterol.aov = aov(colest ~ c(dieta1, dieta2, dieta3), data = ColesterolConejos)
ColesterolConejos <- as.data.frame(ColesterolConejos, row.names = dietas,stringsAsFactors = default.stringsAsFactors())
colesterol.aov = aov(colest ~ c(dieta1, dieta2, dieta3), data = ColesterolConejos)
summary(ColesterolConejos)
colesterol.aov = aov(ColesterolConejos ~ c(dieta1, dieta2, dieta3), data = ColesterolConejos)
rm(list=ls())
setwd("E:/UBA/Análisis Inteligente de Datos/Scripts Apunte Teórico")
library("pgirmess")
library("ggplot2")
install.packages("pgirmess")
#Carga de datos
rendimiento = c(13, 27, 26, 22, 28, 27, 43, 35, 47, 32, 31, 37, 33, 33, 33, 26, 44, 33, 54)
condicion = as.factor(c(rep("A", 6), rep("B", 6), rep("C", 7)))
rendim = data.frame(rendimiento, condicion)
p <- ggplot(rendim, aes(x = condicion, y = rendimiento, color = condicion))
geom_boxplot(fill = condicion)
p
install.packages("ggplot")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
#Carga de datos
rendimiento = c(13, 27, 26, 22, 28, 27, 43, 35, 47, 32, 31, 37, 33, 33, 33, 26, 44, 33, 54)
condicion = as.factor(c(rep("A", 6), rep("B", 6), rep("C", 7)))
rendim = data.frame(rendimiento, condicion)
p <- ggplot(rendim, aes(x = condicion, y = rendimiento, color = condicion))
p <- ggplot2(rendim, aes(x = condicion, y = rendimiento, color = condicion))
p <- ggplot(rendim, aes(x = condicion, y = rendimiento, color = condicion))
